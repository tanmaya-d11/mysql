################################ Task-1 #########################################

alter table payments add orderNumber int;
alter table payments add foreign key(orderNumber) references orders(orderNumber);
describe payments;

Output:
+----------------+---------------+------+-----+---------+-------+
| Field          | Type          | Null | Key | Default | Extra |
+----------------+---------------+------+-----+---------+-------+
| customerNumber | int           | NO   | PRI | NULL    |       |
| checkNumber    | varchar(50)   | NO   | PRI | NULL    |       |
| paymentDate    | date          | NO   |     | NULL    |       |
| amount         | decimal(10,2) | NO   |     | NULL    |       |
| orderNumber    | int           | YES  | MUL | NULL    |       |
+----------------+---------------+------+-----+---------+-------+

################################ Task-2 #########################################
Clustered index:
Clustered index is a table where the data for the rows are stored. It defines the order of the table data based on the key values that can be sorted in only one direction. In the database, each table can contains only one clustered index. In a relational database, if the table column contains a primary key or unique key, MySQL allows you to create a clustered index named PRIMARY based on that specific column.


Secondary index:
A Secondary index is an index that is not a primary index and may have duplicates.

B-Tree:
B-tree is a self-balancing tree data structure that maintains sorted data and allows searches, sequential access, insertions, and deletions in logarithmic time. The B-tree generalizes the binary search tree, allowing for nodes with more than two children.
-> Nodes are sorted in inorder traversal.
-> Search keys and data are stored in internal or leaf nodes.
-> All leaf nodes are at the same level.

Hash index:
A hash index consists of a collection of buckets organized in an array. A hash function maps index keys to corresponding buckets in the hash index.
Hashing is of 2 types:
1. Static Hashing:- In static hashing, when a search-key value is provided, the hash function always computes the same address.
It can be further divided in 2 parts based on collision handling:
1.1 Open hashing:- When a hash function generates an address at which data is already stored, the next free bucket is allocated to it. This mechanism is called Open Hashing.
1.2 Closed hashing:- When buckets are full, a new bucket is allocated for the same hash result and is linked after the previous one. This mechanism is called Closed Hashing.

2. Dynamic Hashing:- The problem with static hashing is that it does not expand or shrink dynamically as the size of the database grows or shrinks. Dynamic hashing provides a mechanism in which data buckets are added and removed dynamically and on-demand. Dynamic hashing is also known as extended hashing.

################################ Task-3 #########################################

select @customerNumber:=MAX(customerNumber)+1 from customers;
insert into customers values (@customerNumber, 'Dummy', 'first', 'Dummy', '1', 'line1', 'line2', 'Mumbai', 'Maharshtra', '400076', 'India', NULL, 10000.00);
select @orderNumber:=MAX(orderNUmber)+1 from orders;
insert into orders values (@orderNumber, '2020-05-12', '2020-05-22', '2020-05-23', 'Shipped', NULL, 497);
insert into orderdetails values (@orderNumber, 'S10_1678', 10, 200.00, 1);
insert into payments values (@customerNumber, 'HQ222113', '2020-05-24', 2000.00, @orderNumber);
commit;

################################ Task-4 #########################################

select customerName, orderNumber, shippedDate, paymentDate, amount, quantityordered, productName, image from (select customers.customerName, orders.orderNumber, orders.shippedDate, payments.paymentDate, payments.amount, orderdetails.productCode, orderdetails.quantityOrdered from customers,orders,payments,orderdetails where customers.customerNumber=497 and orders.orderNumber=10426 and payments.orderNumber=10426 and orderdetails.orderNumber=10426) as subtable,products,productlines where subtable.productCode=products.productCode AND products.productLine=productlines.productLine;

output:
+--------------+-------------+-------------+-------------+---------+-----------------+---------------------------------------+--------------+
| customerName | orderNumber | shippedDate | paymentDate | amount  | quantityOrdered | productName                           | image        |
+--------------+-------------+-------------+-------------+---------+-----------------+---------------------------------------+--------------+
| Dummy        |       10426 | 2020-05-23  | 2020-05-24  | 2000.00 |              10 | 1969 Harley Davidson Ultimate Chopper | 0x           |
+--------------+-------------+-------------+-------------+---------+-----------------+---------------------------------------+--------------+
1 row in set (0.00 sec)

using explain-
+----+-------------+--------------+------------+--------+---------------------+-------------+---------+----------------------------------------+------+----------+-------+
| id | select_type | table        | partitions | type   | possible_keys       | key         | key_len | ref                                    | rows | filtered | Extra |
+----+-------------+--------------+------------+--------+---------------------+-------------+---------+----------------------------------------+------+----------+-------+
|  1 | SIMPLE      | customers    | NULL       | const  | PRIMARY             | PRIMARY     | 4       | const                                  |    1 |   100.00 | NULL  |
|  1 | SIMPLE      | orders       | NULL       | const  | PRIMARY             | PRIMARY     | 4       | const                                  |    1 |   100.00 | NULL  |
|  1 | SIMPLE      | payments     | NULL       | ref    | orderNumber         | orderNumber | 5       | const                                  |    1 |   100.00 | NULL  |
|  1 | SIMPLE      | orderdetails | NULL       | ref    | PRIMARY,productCode | PRIMARY     | 4       | const                                  |    1 |   100.00 | NULL  |
|  1 | SIMPLE      | products     | NULL       | eq_ref | PRIMARY,productLine | PRIMARY     | 17      | classicmodels.orderdetails.productCode |    1 |   100.00 | NULL  |
|  1 | SIMPLE      | productlines | NULL       | eq_ref | PRIMARY             | PRIMARY     | 52      | classicmodels.products.productLine     |    1 |   100.00 | NULL  |
+----+-------------+--------------+------------+--------+---------------------+-------------+---------+----------------------------------------+------+----------+-------+
6 rows in set, 1 warning (0.00 sec)

################################ Task-5 #########################################

create table countorders select customerNumber, count(*) as orderCount from orders group by customerNumber;
alter table countorders add primary key (customerNumber);
alter table countorders add foreign key (customerNumber) references customers(customerNumber);
create trigger update_ordercount after insert on orders for each row update countorders set orderCount=orderCount+1 where customerNumber=new.customerNumber;

On querying select * from countorders where customerNumber=497;
Output:
+----------------+------------+
| customerNumber | orderCount |
+----------------+------------+
|            497 |          1 |
+----------------+------------+

After inserting an order by querying:
insert into orders values (10427, '2020-05-12', '2020-05-23', '2020-05-26', 'Shipped', NULL, 497);
insert into orderdetails values (10427, 'S10_1678', 10, 200.00, 2);
insert into payments values (497, 'HQ222173', '2020-05-27', 2000.00, 10427);
select * from countorders where customerNumber=497;
Output:
+----------------+------------+
| customerNumber | orderCount |
+----------------+------------+
|            497 |          2 |
+----------------+------------+
